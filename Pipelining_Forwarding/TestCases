TestCases ($a1 <= 1 in all test cases)

Register written in previous cycle is to be read: (Forward from EX-MEM latch to EX stage):
add $a0 $zero $zero
add $a1 $a0 $a0

Register written in previous to previous cycle is to be read: (Forward from MEM-WB latch to EX stage):
add $a0 $zero $zero
sub $a1 $zero $zero
add $a1 $a0 $a0

Register loaded in previous cycle is to be read: (Stall + Forward from MEM-WB latch to EX stage):
sub $sp $sp $a1
lw $a0 0 $sp
add $a1 $a0 $a0

Register loaded in previous cycle is to be read: (Forward from MEM-WB latch to EX stage):
sub $sp $sp $a1
lw $a0 0 $sp
add $a2 $a2 $a2
add $a1 $a0 $a0

Register updated(written/loaded) in previous cycle is to be stored:(Forward from MEM-WB latch to MEM stage):
sub $sp $sp $a1
add $a0 $zero $zero
sw $a0 0 $sp

Register updated(written/loaded) in previous to previous cycle is to be stored:(Forward from post-WB latch to MEM stage):
add $a0 $zero $zero
sub $sp $sp $a1
sw $a0 0 $sp

Testcases for comparison with assignment 8:
*************************************************************************************************
Finding sum of first $a3 numbers: 
$a1 <= 1.

add $a3 $a3 $a1
add $a3 $a3 $a1
add $a3 $a3 $a1
add $a3 $a3 $a1
jal findsum
j exit
findsum:
sub $sp $sp $a1
sub $sp $sp $a1
sw $a0 0 $sp
sw $a3 1 $sp
add $a0 $zero $zero
for:
add $a0 $a0 $a3
sub $a3 $a3 $a1
bne $a3 $zero for
add $v0 $a0 $zero
lw $a3 1 $sp
lw $a0 0 $sp
add $sp $sp $a1
add $sp $sp $a1
jr $ra
exit:

*************************************************************************************************
//Storing first $v1 fibonacci numbers in the momory from (4095..4095 - $v0 + 1)
$a1 <= 1, $at <= 1

label1:
sub $sp $sp $at
sw $a0 0 $sp
sub $sp $sp $at
sw $a1 0 $sp
add $v0 $v0 $at
label2:
add $a2 $a1 $a0
sub $sp $sp $at
sw $a2 0 $sp
lw $a0 1 $sp
lw $a1 0 $sp
add $v0 $v0 $at
beq $v0 $v1 label3
j label2
label3:
